@page "/products/edit/{id:int}"
@inject ProductApiClient ProductsApi
@inject NavigationManager Navigation

<h3>Edit Product</h3>

@if (dataLoaded == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (product != null)
    {
        <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="product.Name" />
            </div>

            <div class="mb-3">
                <label class="form-label">Price</label>
                <InputNumber class="form-control" @bind-Value="product.Price" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" @bind-Value="product.Description" />
            </div>

            <button type="submit" class="btn btn-primary">
                <i class="bi bi-save"></i> Save
            </button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">
                Cancel
            </button>
        </EditForm>
    }
    else
    {
        <h5>Product Not Found!</h5>
    }
}

@code {
    [Parameter] public int id { get; set; }
    private ProductDto? product;
    private bool dataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        product = await ProductsApi.GetProductByIdAsync(id);
        dataLoaded = true;
    }

    private async Task HandleValidSubmit()
    {
        var result = await ProductsApi.UpdateProductAsync(product!);
        if (result)
        {
            Navigation.NavigateTo("/products");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/products");
    }
}
